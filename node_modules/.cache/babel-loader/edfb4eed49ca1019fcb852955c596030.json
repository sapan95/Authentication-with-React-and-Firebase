{"ast":null,"code":"var _jsxFileName = \"E:\\\\React\\\\Projects\\\\fb-google auth\\\\src\\\\components\\\\Auth\\\\AuthForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef } from 'react';\nimport firebase from \"../../firebase_config/firebaseConfig\";\nimport classes from './AuthForm.module.css';\nimport SocialLogin from './SocialLogin';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AuthForm = () => {\n  _s();\n\n  const [otpExist, setOtpExist] = useState(false);\n  const mobNoRef = useRef();\n  let verifyNumber;\n\n  const getOtpHandler = async () => {\n    let recaptcha = new firebase.auth.RecaptchaVerifier(\"recaptcha-container\");\n    let number = \"+91\" + mobNoRef.current.value;\n    debugger;\n\n    try {\n      verifyNumber = await firebase.auth().signInWithPhoneNumber(number, recaptcha);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const confirmOtp = () => {\n    let code = prompt(\"enter otp\");\n\n    if (code == null) {\n      return;\n    }\n\n    verifyNumber.confirm(code).then(res => {\n      console.log(res);\n    }).catch(e => {\n      console.log(e);\n    });\n  };\n\n  const verifyOtp = event => {\n    event.preventDefault();\n    confirmOtp();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.auth,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: verifyOtp,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"mobileNo\",\n          children: \"Your Mobile Number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"mobileNo\",\n          minLength: \"10\",\n          maxLength: \"10\",\n          ref: mobNoRef,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"recaptcha-container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: [!otpExist && /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: getOtpHandler,\n          children: \"Get OTP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, this), otpExist && /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Get OTP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 24\n        }, this), /*#__PURE__*/_jsxDEV(SocialLogin, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthForm, \"IBVkC/FYgfGU2n/GqnoZcb6SiDg=\");\n\n_c = AuthForm;\nexport default AuthForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthForm\");","map":{"version":3,"sources":["E:/React/Projects/fb-google auth/src/components/Auth/AuthForm.js"],"names":["useState","useRef","firebase","classes","SocialLogin","AuthForm","otpExist","setOtpExist","mobNoRef","verifyNumber","getOtpHandler","recaptcha","auth","RecaptchaVerifier","number","current","value","signInWithPhoneNumber","error","console","log","confirmOtp","code","prompt","confirm","then","res","catch","e","verifyOtp","event","preventDefault","control","actions"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,MAAnB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,sCAArB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAMQ,QAAQ,GAAGP,MAAM,EAAvB;AACA,MAAIQ,YAAJ;;AACA,QAAMC,aAAa,GAAG,YAAY;AAC9B,QAAIC,SAAS,GAAG,IAAIT,QAAQ,CAACU,IAAT,CAAcC,iBAAlB,CAAoC,qBAApC,CAAhB;AACA,QAAIC,MAAM,GAAG,QAAQN,QAAQ,CAACO,OAAT,CAAiBC,KAAtC;AACA;;AACA,QAAG;AACDP,MAAAA,YAAY,GAAG,MAAMP,QAAQ,CAACU,IAAT,GAAgBK,qBAAhB,CAAsCH,MAAtC,EAA8CH,SAA9C,CAArB;AACD,KAFD,CAEE,OAAOO,KAAP,EAAa;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACD,GATJ;;AAUG,QAAMG,UAAU,GAAG,MAAM;AACxB,QAAIC,IAAI,GAAGC,MAAM,CAAC,WAAD,CAAjB;;AACE,QAAID,IAAI,IAAI,IAAZ,EAAkB;AAChB;AACD;;AACDb,IAAAA,YAAY,CAACe,OAAb,CAAqBF,IAArB,EAA2BG,IAA3B,CAAiCC,GAAD,IAAS;AACvCP,MAAAA,OAAO,CAACC,GAAR,CAAYM,GAAZ;AACD,KAFD,EAEGC,KAFH,CAEUC,CAAD,IAAO;AACdT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,CAAZ;AACD,KAJD;AAKH,GAVA;;AAWA,QAAMC,SAAS,GAAIC,KAAD,IAAW;AAC1BA,IAAAA,KAAK,CAACC,cAAN;AACAV,IAAAA,UAAU;AACZ,GAHD;;AAIH,sBACE;AAAS,IAAA,SAAS,EAAElB,OAAO,CAACS,IAA5B;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAM,MAAA,QAAQ,EAAIiB,SAAlB;AAAA,8BACE;AAAK,QAAA,SAAS,EAAE1B,OAAO,CAAC6B,OAAxB;AAAA,gCACE;AAAO,UAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,EAAE,EAAC,UAAxB;AAAmC,UAAA,SAAS,EAAG,IAA/C;AAAoD,UAAA,SAAS,EAAG,IAAhE;AAAqE,UAAA,GAAG,EAAIxB,QAA5E;AAAsF,UAAA,QAAQ;AAA9F;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAK,QAAA,EAAE,EAAC;AAAR;AAAA;AAAA;AAAA;AAAA,cALF,eAOE;AAAK,QAAA,SAAS,EAAEL,OAAO,CAAC8B,OAAxB;AAAA,mBACG,CAAC3B,QAAD,iBAAa;AAAQ,UAAA,IAAI,EAAG,QAAf;AAAwB,UAAA,OAAO,EAAII,aAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADhB,EAEGJ,QAAQ,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFf,eAGE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CA/CD;;GAAMD,Q;;KAAAA,Q;AAiDN,eAAeA,QAAf","sourcesContent":["import { useState, useRef } from 'react';\nimport firebase from \"../../firebase_config/firebaseConfig\";\nimport classes from './AuthForm.module.css';\nimport SocialLogin from './SocialLogin';\n\nconst AuthForm = () => {\n  const [otpExist, setOtpExist] = useState(false);\n  const mobNoRef = useRef();\n  let verifyNumber;\n  const getOtpHandler = async () => {      \n      let recaptcha = new firebase.auth.RecaptchaVerifier(\"recaptcha-container\");\n      let number = \"+91\" + mobNoRef.current.value;\n      debugger;\n      try{\n        verifyNumber = await firebase.auth().signInWithPhoneNumber(number, recaptcha);\n      } catch (error){\n        console.log(error);\n      }\n     }\n     const confirmOtp = () => {\n      let code = prompt(\"enter otp\");\n        if (code == null) {\n          return;\n        }\n        verifyNumber.confirm(code).then((res) => {\n          console.log(res);\n        }).catch((e) => {\n          console.log(e);\n        });\n    }\n     const verifyOtp = (event) => {\n        event.preventDefault();\n        confirmOtp();\n     }\n  return (\n    <section className={classes.auth}>\n      <h1>Login</h1>\n      <form onSubmit = {verifyOtp}>\n        <div className={classes.control}>\n          <label htmlFor='mobileNo'>Your Mobile Number</label>\n          <input type='number' id='mobileNo' minLength = '10' maxLength = '10' ref = {mobNoRef} required/>\n        </div>\n        <div id=\"recaptcha-container\"></div>\n        \n        <div className={classes.actions}>\n          {!otpExist && <button type = 'button' onClick = {getOtpHandler}>Get OTP</button>}\n          {otpExist && <button>Get OTP</button>}\n          <SocialLogin />\n        </div>\n      </form>\n    </section>\n  );\n};\n\nexport default AuthForm;\n"]},"metadata":{},"sourceType":"module"}