{"ast":null,"code":"import { createSlice, configureStore } from \"@reduxjs/toolkit\";\n\nconst calculateRemainingTime = expiryDate => {\n  const now = new Date().getTime();\n  const expirytime = new Date(expiryDate).getTime();\n  return expirytime - now;\n};\n\nlet logoutTimer;\nexport const retrieveStoredToken = () => {\n  const storedToken = localStorage.getItem(\"token\");\n  const storedExpirationDate = localStorage.getItem(\"expirationTime\");\n  const remainingTime = calculateRemainingTime(storedExpirationDate);\n\n  if (remainingTime <= 3600) {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"expirationTime\");\n    return null;\n  }\n\n  return {\n    token: storedToken,\n    duration: remainingTime\n  };\n};\nconst tokenData = retrieveStoredToken();\nlet initialToken = null;\n\nif (tokenData) {\n  initialToken = tokenData.token;\n}\n\nconst initialAuthState = {\n  token: initialToken,\n  isLoggedIn: !!initialToken\n};\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: initialAuthState,\n  reducers: {\n    logout(state) {\n      state.isLoggedIn = false;\n      state.token = null;\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"expirationTime\");\n\n      if (logoutTimer) {\n        clearTimeout(logoutTimer);\n      }\n    },\n\n    login(state, token, expiryTime) {\n      debugger;\n      state.isLoggedIn = true;\n      state.token = token;\n      localStorage.setItem(\"token\", token);\n      localStorage.setItem(\"expirationTime\", expiryTime);\n      const remainingTime = calculateRemainingTime(expiryTime);\n      debugger;\n      logoutTimer = setTimeout(WorkspacesSlice.caseReducers.logout(), remainingTime);\n    }\n\n  }\n});\nconst store = configureStore({\n  reducer: {\n    auth: authSlice.reducer\n  }\n});\nexport const authAction = authSlice.actions;\nexport default store;","map":{"version":3,"sources":["E:/React/Projects/fb-google auth/src/store/auth.js"],"names":["createSlice","configureStore","calculateRemainingTime","expiryDate","now","Date","getTime","expirytime","logoutTimer","retrieveStoredToken","storedToken","localStorage","getItem","storedExpirationDate","remainingTime","removeItem","token","duration","tokenData","initialToken","initialAuthState","isLoggedIn","authSlice","name","initialState","reducers","logout","state","clearTimeout","login","expiryTime","setItem","setTimeout","WorkspacesSlice","caseReducers","store","reducer","auth","authAction","actions"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;;AAEA,MAAMC,sBAAsB,GAAIC,UAAD,IAAgB;AAC3C,QAAMC,GAAG,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAZ;AACA,QAAMC,UAAU,GAAG,IAAIF,IAAJ,CAASF,UAAT,EAAqBG,OAArB,EAAnB;AAEA,SAAOC,UAAU,GAAGH,GAApB;AACH,CALD;;AAOA,IAAII,WAAJ;AAEA,OAAO,MAAMC,mBAAmB,GAAG,MAAM;AACvC,QAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAApB;AACA,QAAMC,oBAAoB,GAAGF,YAAY,CAACC,OAAb,CAAqB,gBAArB,CAA7B;AAEA,QAAME,aAAa,GAAGZ,sBAAsB,CAACW,oBAAD,CAA5C;;AAEA,MAAIC,aAAa,IAAI,IAArB,EAA2B;AACzBH,IAAAA,YAAY,CAACI,UAAb,CAAwB,OAAxB;AACAJ,IAAAA,YAAY,CAACI,UAAb,CAAwB,gBAAxB;AACA,WAAO,IAAP;AACD;;AAED,SAAO;AACLC,IAAAA,KAAK,EAAEN,WADF;AAELO,IAAAA,QAAQ,EAAEH;AAFL,GAAP;AAID,CAhBM;AAkBP,MAAMI,SAAS,GAAGT,mBAAmB,EAArC;AAEA,IAAIU,YAAY,GAAG,IAAnB;;AACA,IAAID,SAAJ,EAAe;AACbC,EAAAA,YAAY,GAAGD,SAAS,CAACF,KAAzB;AACD;;AAED,MAAMI,gBAAgB,GAAG;AACrBJ,EAAAA,KAAK,EAAEG,YADc;AAErBE,EAAAA,UAAU,EAAE,CAAC,CAACF;AAFO,CAAzB;AAIA,MAAMG,SAAS,GAAGtB,WAAW,CAAC;AAC1BuB,EAAAA,IAAI,EAAE,MADoB;AAE1BC,EAAAA,YAAY,EAAEJ,gBAFY;AAG1BK,EAAAA,QAAQ,EAAE;AACNC,IAAAA,MAAM,CAACC,KAAD,EAAO;AACTA,MAAAA,KAAK,CAACN,UAAN,GAAmB,KAAnB;AACAM,MAAAA,KAAK,CAACX,KAAN,GAAc,IAAd;AACAL,MAAAA,YAAY,CAACI,UAAb,CAAwB,OAAxB;AACAJ,MAAAA,YAAY,CAACI,UAAb,CAAwB,gBAAxB;;AAEA,UAAIP,WAAJ,EAAiB;AACfoB,QAAAA,YAAY,CAACpB,WAAD,CAAZ;AACD;AACJ,KAVK;;AAUJqB,IAAAA,KAAK,CAACF,KAAD,EAAQX,KAAR,EAAec,UAAf,EAA0B;AAC/B;AACEH,MAAAA,KAAK,CAACN,UAAN,GAAmB,IAAnB;AACAM,MAAAA,KAAK,CAACX,KAAN,GAAcA,KAAd;AACAL,MAAAA,YAAY,CAACoB,OAAb,CAAqB,OAArB,EAA8Bf,KAA9B;AACAL,MAAAA,YAAY,CAACoB,OAAb,CAAqB,gBAArB,EAAuCD,UAAvC;AACA,YAAMhB,aAAa,GAAGZ,sBAAsB,CAAC4B,UAAD,CAA5C;AACA;AACAtB,MAAAA,WAAW,GAAGwB,UAAU,CAACC,eAAe,CAACC,YAAhB,CAA6BR,MAA7B,EAAD,EAAwCZ,aAAxC,CAAxB;AACH;;AAnBK;AAHgB,CAAD,CAA7B;AA0BA,MAAMqB,KAAK,GAAGlC,cAAc,CAAC;AACzBmC,EAAAA,OAAO,EAAE;AAACC,IAAAA,IAAI,EAAEf,SAAS,CAACc;AAAjB;AADgB,CAAD,CAA5B;AAIA,OAAO,MAAME,UAAU,GAAGhB,SAAS,CAACiB,OAA7B;AACP,eAAeJ,KAAf","sourcesContent":["import { createSlice, configureStore } from \"@reduxjs/toolkit\";\r\n\r\nconst calculateRemainingTime = (expiryDate) => {\r\n    const now = new Date().getTime();\r\n    const expirytime = new Date(expiryDate).getTime();\r\n  \r\n    return expirytime - now;\r\n};\r\n\r\nlet logoutTimer;\r\n\r\nexport const retrieveStoredToken = () => {\r\n  const storedToken = localStorage.getItem(\"token\");\r\n  const storedExpirationDate = localStorage.getItem(\"expirationTime\");\r\n\r\n  const remainingTime = calculateRemainingTime(storedExpirationDate);\r\n\r\n  if (remainingTime <= 3600) {\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"expirationTime\");\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    token: storedToken,\r\n    duration: remainingTime,\r\n  };\r\n};\r\n\r\nconst tokenData = retrieveStoredToken();\r\n\r\nlet initialToken = null;\r\nif (tokenData) {\r\n  initialToken = tokenData.token;\r\n}\r\n\r\nconst initialAuthState = {\r\n    token: initialToken,\r\n    isLoggedIn: !!initialToken\r\n};\r\nconst authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialAuthState,\r\n    reducers: {\r\n        logout(state){\r\n            state.isLoggedIn = false;\r\n            state.token = null;\r\n            localStorage.removeItem(\"token\");\r\n            localStorage.removeItem(\"expirationTime\");\r\n        \r\n            if (logoutTimer) {\r\n              clearTimeout(logoutTimer);\r\n            }\r\n        },login(state, token, expiryTime){\r\n          debugger;\r\n            state.isLoggedIn = true;\r\n            state.token = token;\r\n            localStorage.setItem(\"token\", token);\r\n            localStorage.setItem(\"expirationTime\", expiryTime);\r\n            const remainingTime = calculateRemainingTime(expiryTime);\r\n            debugger;\r\n            logoutTimer = setTimeout(WorkspacesSlice.caseReducers.logout(), remainingTime);\r\n        }\r\n    }\r\n})\r\n\r\nconst store = configureStore({\r\n    reducer: {auth: authSlice.reducer}\r\n});\r\n\r\nexport const authAction = authSlice.actions;\r\nexport default store;"]},"metadata":{},"sourceType":"module"}